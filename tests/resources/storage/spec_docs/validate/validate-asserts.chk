---
version: default:validation:0.7.2

variables:
  response:
    int: 200
    float: 200.23
    string1: "200.23"
    string2: "Some random string"
    string3: Some random string
    map: {
      "name": Thin Air,
      "address": Mountains
    }

data:
  code: 200

asserts:
  - { type: Equal, actual: <% response.int %>, expected: 200 }
  - { type: Equal, actual: <% response.float %>, expected: 200.23 }
  - { type: Equal, actual: "[ 1, 2, 3 ]", expected: [ 1, 2, 3 ], cast_actual_to: list }
  - { type: Equal, actual: "{'a': 1, 'c': 3, 'b': 2}", expected: { 'a': 1, 'c': 3, 'b': 2 }, cast_actual_to: map }
  - { type: Equal, actual: "False", expected: False, cast_actual_to: bool }
  - { type: Equal, actual: "False", expected: False, cast_actual_to: auto }

  - { type: NotEqual, actual: "False", expected: False }

  - { type: Empty, actual: ~ }
  - { type: NotEmpty, actual: 2 }

  - { type: Accepted, actual: 2 }
  - { type: Accepted, actual: "Yes" }
  - { type: Accepted, actual: "YES" }
  - { type: Accepted, actual: "yes" }
  - { type: Accepted, actual: 1 }
  - { type: Accepted, actual: "On" }
  - { type: Accepted, actual: "ON" }
  - { type: Accepted, actual: "on" }
  - { type: Accepted, actual: True }
  - { type: Accepted, actual: "True" }
  - { type: Accepted, actual: "TRUE" }
  - { type: Accepted, actual: "true" }

  - { type: Declined, actual: 2 }
  - { type: Declined, actual: "No" }
  - { type: Declined, actual: "NO" }
  - { type: Declined, actual: "no" }
  - { type: Declined, actual: 0 }
  - { type: Declined, actual: "Off" }
  - { type: Declined, actual: "OFF" }
  - { type: Declined, actual: "off" }
  - { type: Declined, actual: False }
  - { type: Declined, actual: "False" }
  - { type: Declined, actual: "FALSE" }
  - { type: Declined, actual: "false" }

  - { type: Boolean, actual: 2 }
  - { type: Boolean, actual: True }
  - { type: Boolean, actual: "true", cast_actual_to: bool }
  - { type: Boolean, actual: True, expected: False }
  - { type: Boolean, actual: True, expected: 2 }
  - { type: Boolean, actual: "true", expected: False, cast_actual_to: bool }

  - { type: Integer, actual: 10 }
  - { type: Integer, actual: -10 }
  - { type: Integer, actual: a }

  - { type: IntegerBetween, actual: 12, min: 11, max: 13 }
  - { type: IntegerBetween, actual: 5, min: 11, max: 13 }
  - { type: IntegerBetween, actual: 15, min: 11, max: 13 }
  - { type: IntegerBetween, actual: "15", min: 11, max: 13 }
  - { type: IntegerBetween, actual: "12", min: 11, max: 13, cast_actual_to: int }

  - { type: IntegerGreater, actual: 12, other: 11 }
  - { type: IntegerGreater, actual: 5, other: 11 }
  - { type: IntegerGreater, actual: "15", other: 11 }
  - { type: IntegerGreater, actual: "12", other: 11, cast_actual_to: int }

  - { type: IntegerGreaterOrEqual, actual: 12, other: 12 }
  - { type: IntegerGreaterOrEqual, actual: 5, other: 11 }
  - { type: IntegerGreaterOrEqual, actual: "15", other: 15 }
  - { type: IntegerGreaterOrEqual, actual: "12", other: 15, cast_actual_to: int }
  - { type: IntegerGreaterOrEqual, actual: "16", other: 15, cast_actual_to: int }

  - { type: IntegerLess, actual: 12, other: 11 }
  - { type: IntegerLess, actual: 5, other: 11 }
  - { type: IntegerLess, actual: "12", other: 13, cast_actual_to: int }

  - { type: IntegerLessOrEqual, actual: 12, other: 12 }
  - { type: IntegerLessOrEqual, actual: 5, other: 11 }
  - { type: IntegerLessOrEqual, actual: "15", other: 15 }
  - { type: IntegerLessOrEqual, actual: "12", other: 15, cast_actual_to: int }
  - { type: IntegerLessOrEqual, actual: "16", other: 15, cast_actual_to: int }

  - { type: Float, actual: 10.0 }
  - { type: Float, actual: -10.00000000001 }
  - { type: Float, actual: a }

  - { type: FloatBetween, actual: 12.34, min: 11, max: 13 }
  - { type: FloatBetween, actual: 5.0, min: 11, max: 13 }
  - { type: FloatBetween, actual: 15.89, min: 11, max: 13 }
  - { type: FloatBetween, actual: "15.32", min: 11, max: 13 }
  - { type: FloatBetween, actual: "12.24", min: 11, max: 13, cast_actual_to: float }

  - { type: FloatGreater, actual: 12.0, other: 12 }
  - { type: FloatGreater, actual: 5.0, other: 13 }
  - { type: FloatGreater, actual: 15.89, other: 13 }
  - { type: FloatGreater, actual: "15.32", other: 13 }
  - { type: FloatGreater, actual: "13.24", other: 13, cast_actual_to: float }

  - { type: FloatGreaterOrEqual, actual: 12.0, other: 12 }
  - { type: FloatGreaterOrEqual, actual: 5.0, other: 11 }
  - { type: FloatGreaterOrEqual, actual: "15", other: 15 }
  - { type: FloatGreaterOrEqual, actual: "12.23", other: 15, cast_actual_to: float }
  - { type: FloatGreaterOrEqual, actual: "16.56", other: 15, cast_actual_to: float }

  - { type: FloatLess, actual: 12.9, other: 11.0 }
  - { type: FloatLess, actual: 5.0, other: 11.0 }
  - { type: FloatLess, actual: "12.3", other: 13.3 }
  - { type: FloatLess, actual: "12.3", other: 13.3, cast_actual_to: float }

  - { type: FloatLessOrEqual, actual: 12.0, other: 12 }
  - { type: FloatLessOrEqual, actual: 5.0, other: 11 }
  - { type: FloatLessOrEqual, actual: "15", other: 15 }
  - { type: FloatLessOrEqual, actual: "12.23", other: 15.7, cast_actual_to: float }
  - { type: FloatLessOrEqual, actual: "16.56", other: 15, cast_actual_to: float }

  - { type: Str, actual: <% response.string1%> }
  - { type: Str, actual: <% response.string2 %> }
  - { type: Str, actual: <% response.string3 %> }
  - { type: Str, actual: 23 }
  - { type: Str, actual: ~ }

  - { type: StrHave, actual: 'https://someurl.com', other: 'someurl' }
  - { type: StrHave, actual: '{"a": 1, "b": 2}', other: '"b":' }
  - { type: StrHave, actual: '{"a": 1, "b": 2}', other: '{"a": 1}' }

  - { type: StrDoNotHave, actual: 'https://someurl.com', other: 'someurl' }
  - { type: StrDoNotHave, actual: '{"a": 1, "b": 2}', other: '"b":' }
  - { type: StrDoNotHave, actual: '{"a": 1, "b": 2}', other: '{"a": 1}' }

  - { type: StrStartsWith, actual: 'https://someurl.com', other: 'http' }
  - { type: StrStartsWith, actual: '{"a": 1, "b": 2}', other: '"b":' }
  - { type: StrStartsWith, actual: '{"a": 1, "b": 2}', other: '{"a"' }

  - { type: StrDoNotStartsWith, actual: 'https://someurl.com', other: '.com' }
  - { type: StrDoNotStartsWith, actual: '{"a": 1, "b": 2}', other: '"b":' }
  - { type: StrDoNotStartsWith, actual: '{"a": 1, "b": 2}', other: '{"a"' }

  - { type: StrEndsWith, actual: 'https://someurl.com', other: '.com' }
  - { type: StrEndsWith, actual: '{"a": 1, "b": 2}', other: '": 2}' }
  - { type: StrEndsWith, actual: '{"a": 1, "b": 2}', other: '{"a"' }

  - { type: StrDoNotEndsWith, actual: 'https://someurl.com', other: 'https' }
  - { type: StrDoNotEndsWith, actual: '{"a": 1, "b": 2}', other: '"b":' }
  - { type: StrDoNotEndsWith, actual: '{"a": 1, "b": 2}', other: '": 2}' }

  - { type: Date, actual: '1972-07-30', format: "%Y-%m-%d" }
  - { type: Date, actual: "1972-30-07", format: "%Y-%m-%d" }
  - { type: Date, actual: "abcd", format: "%Y-%m-%d" }
  - { type: Date, actual: "1972-33-07", format: "%Y-%d-%m" }
  - { type: Date, actual: "1972-07", format: "%Y-%m" }

  - { type: DateAfter, actual: '1972-07-30', expected: "1972-07-29", format: "%Y-%m-%d" }
  - { type: DateAfter, actual: "1972-07-20", expected: "1972-07-29", format: "%Y-%m-%d" }
  - { type: DateAfter, actual: "1972-07", expected: "1972-06", format: "%Y-%m" }

  - { type: DateAfterOrEqual, actual: '1972-07-30', expected: "1972-07-30", format: "%Y-%m-%d" }
  - { type: DateAfterOrEqual, actual: "1972-07", expected: "1972-07", format: "%Y-%m" }

  - { type: DateBefore, actual: '1972-06-30', expected: "1972-07-30", format: "%Y-%m-%d" }
  - { type: DateBefore, actual: "1972-07-20", expected: "1972-07-29", format: "%Y-%m-%d" }
  - { type: DateBefore, actual: "1972-07", expected: "1972-06", format: "%Y-%m" }

  - { type: DateBeforeOrEqual, actual: '1972-06-30', expected: "1972-07-30", format: "%Y-%m-%d" }
  - { type: DateBeforeOrEqual, actual: "1972-07", expected: "1972-07", format: "%Y-%m" }

  - { type: List, actual: 'some' }
  - { type: List, actual: "[1, 2, 3]", cast_actual_to: list }
  - { type: List, actual: [ 1, 2, 3 ] }
  - { type: List, actual: [ 1, "2", 3.0 ] }

  - { type: ListContains, actual: "[1, 2, 3]", expected: 2, cast_actual_to: list }
  - { type: ListContains, actual: [ 1, 2, 3 ], expected: 3 }
  - { type: ListContains, actual: [ 1, "2", 3.0 ], expected: 4 }

  - { type: ListDoNotContains, actual: "[1, 2, 3]", expected: 4, cast_actual_to: list }
  - { type: ListDoNotContains, actual: [ 1, 2, 3 ], expected: 4 }
  - { type: ListDoNotContains, actual: [ 1, "2", 3.0 ], expected: 2 }
  - { type: ListDoNotContains, actual: [ 1, "2", 3.0 ], expected: '2' }

  - { type: ListHasIndex, actual: "[1, 2, 3]", index: 2, cast_actual_to: list }
  - { type: ListHasIndex, actual: [ 1, 2, 3 ], index: 3 }
  - { type: ListHasIndex, actual: [ 1, "2", 3.0 ], index: 4 }

  - { type: ListDoNotHasIndex, actual: "[1, 2, 3]", index: 2, cast_actual_to: list }
  - { type: ListDoNotHasIndex, actual: [ 1, 2, 3 ], index: 3 }
  - { type: ListDoNotHasIndex, actual: [ 1, "2", 3.0 ], index: 4 }

  - { type: Map, actual: <% response.map %>, cast_actual_to: map }
  - { type: Map, actual: "{ 'a': 1, 'b': 2 }", cast_actual_to: map }
  - { type: Map, actual: { 'a': 1, 'b': 2 } }
  - { type: Map, actual: [ 'a', 1, 'b', 2 ] }

  - { type: MapKeyCount, actual: <% response.map %>, expected: 2, cast_actual_to: map }
  - { type: MapKeyCount, actual: { 'a': 1, 'b': 2 }, expected: 3, cast_actual_to: map }

  - { type: MapHasKeys, actual: <% response.map %>, expected: [ "address", "name" ] }
  - { type: MapHasKeys, actual: { 'a': 1, 'b': 2 }, expected: [ "b" ] }
  - { type: MapHasKeys, actual: { 'a': 1, 'b': 2 }, expected: "b" }

  - { type: MapHasKeys, actual: <% response.map %>, expected: [ "address", "name" ] }
  - { type: MapHasKeys, actual: { 'a': 1, 'b': 2 }, expected: [ "b" ] }
  - { type: MapHasKeys, actual: { 'a': 1, 'b': 2 }, expected: "b" }

  - { type: MapDoNotHasKeys, actual: <% response.map %>, expected: [ "address", "name" ] }
  - { type: MapDoNotHasKeys, actual: { 'a': 1, 'b': 2 }, expected: [ "c" ] }
  - { type: MapDoNotHasKeys, actual: { 'a': 1, 'b': 2 }, expected: "b" }

  - { type: MapExactKeys, actual: <% response.map %>, expected: [ "address", "name" ] }
  - { type: MapExactKeys, actual: { 'a': 1, 'b': 2 }, expected: [ "a" ] }
  - { type: MapExactKeys, actual: { 'a': 1, 'b': 2 }, expected: "b" }

  - { type: Count, actual: { 'a': 1, 'b': 2 }, expected: 2 }
  - { type: Count, actual: { 'a', 'b', 'c', 'd' }, expected: 4 }
  - { type: Count, actual: 'abcd', expected: 4 }
  - { type: Count, actual: 1, expected: 1 }
  - { type: Count, actual: 1, expected: 1, msg_fail: '`{type_actual}({value_actual})` is not countable.' }

expose:
  - <% _asserts_response %>

#
# poetry run python -m chk validate tests/resources/storage/spec_docs/validate/validate-asserts.chk
#